 
services:
  postgres:
    container_name: postgres
    build:
      context: .
      dockerfile: postgres/Dockerfile
    env_file:
      - .env
    platform:  linux/arm64
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    ports:
      - "${POSTGRES_PORT}:5432"
      

  grafana:
    build:
      context: .
      dockerfile: grafana/dashboards/Dockerfile
    env_file:
      - .env
    platform:  linux/amd64
  
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://grafana:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    depends_on:
      postgres:
        condition: service_healthy
    environment
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/plugins:/etc/grafana/provisioning/plugins
      - ./grafana/provisioning/alerting:/etc/grafana/provisioning/alerting

    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT}:3000"
    networks:
      - network

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: frontend
    env_file:
      - .env
    platform:  linux/arm64 #,linux/arm64, amd64
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}"
      GRAFANA_URL: "${GRAFANA_URL}"
    depends_on:
      postgres:
        condition: service_healthy
      grafana:
        condition: service_healthy
    networks:
      - network
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      #- ./grafana/grafana_api_key.txt:/app/grafana/grafana_api_key.txt:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://frontend:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    ports:
      - "${FRONTEND_PORT}:8001"
     

  grafana-token-creator:
    build:
      context: .
      dockerfile: grafana/Dockerfile
    env_file:
      - .env
    depends_on:
      grafana:
        condition: service_healthy
    networks:
      - network
    restart: "no"
    environment:
      PYTHONPATH: /app    
      SIMULATION_MODE: 4
    
  adminer:
    image: adminer:latest
    ports:
      - "${ADMINER_PORT}:8080"
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
    depends_on:
       postgres:
          condition: service_healthy
    networks:
      - network
    restart: unless-stopped
    
  


volumes:
  postgres_data:
    driver: local
  grafana_data:
    driver: local

networks:
  network:
    driver: bridge
