#!/bin/bash

echo "üîç === DIAGN√ìSTICO COMPLETO === üîç"
echo ""

# 1. Status dos containers
echo "üì¶ === STATUS DOS CONTAINERS ==="
docker-compose ps
echo ""

# 2. Health checks
echo "üè• === HEALTH CHECKS ==="
docker inspect postgres --format='{{json .State.Health}}' | python3 -m json.tool 2>/dev/null || echo "PostgreSQL health check n√£o dispon√≠vel"
docker inspect grafana --format='{{json .State.Health}}' | python3 -m json.tool 2>/dev/null || echo "Grafana health check n√£o dispon√≠vel"
echo ""

# 3. Conectividade de rede
echo "üåê === TESTE DE CONECTIVIDADE ==="
echo "Testando conex√£o do Grafana para PostgreSQL..."
docker exec grafana sh -c "nc -zv postgres 5432" 2>&1 || echo "‚ùå Falha na conectividade"
echo ""

# 4. Logs recentes do PostgreSQL
echo "üìã === LOGS RECENTES POSTGRESQL (√∫ltimas 6 linhas) ==="
docker logs postgres --tail=5
echo ""

# 5. Logs recentes do Grafana  
echo "üìã === LOGS RECENTES GRAFANA (√∫ltimas 20 linhas) ==="
docker logs grafana --tail=
echo ""

# 6. Vari√°veis de ambiente
echo "‚öôÔ∏è === VARI√ÅVEIS DE AMBIENTE ==="
echo "Verificando se as vari√°veis est√£o definidas..."
docker exec postgres sh -c 'echo "POSTGRES_DB: $POSTGRES_DB"'
docker exec postgres sh -c 'echo "POSTGRES_USER: $POSTGRES_USER"' 
docker exec postgres sh -c 'echo "POSTGRES_PASSWORD: [DEFINIDA]"'
echo ""

# 7. Teste direto de conex√£o PostgreSQL
echo "üîå === TESTE DIRETO POSTGRESQL ==="
echo "Testando conex√£o direta ao PostgreSQL..."
docker exec postgres sh -c 'pg_isready -U $POSTGRES_USER -d $POSTGRES_DB' || echo "‚ùå PostgreSQL n√£o est√° pronto"
echo ""

# 8. Verificar se h√° dados nas tabelas
echo "üìä === VERIFICAR DADOS NAS TABELAS ==="
echo "Listando tabelas no banco..."
docker exec postgres sh -c 'psql -U $POSTGRES_USER -d $POSTGRES_DB -c "\dt"' 2>/dev/null || echo "‚ùå N√£o foi poss√≠vel listar tabelas"
echo ""

# 9. Testar query simples
echo "üîç === TESTE DE QUERY SIMPLES ==="
echo "Executando SELECT 1..."
docker exec postgres sh -c 'psql -U $POSTGRES_USER -d $POSTGRES_DB -c "SELECT 1 as test;"' 2>/dev/null || echo "‚ùå N√£o foi poss√≠vel executar query"
echo ""

# 10. Verificar configura√ß√£o do Grafana
echo "‚öôÔ∏è === CONFIGURA√á√ÉO GRAFANA ==="
echo "Verificando se o datasource est√° configurado..."
docker exec grafana sh -c "ls -la /etc/grafana/provisioning/datasources/" 2>/dev/null || echo "‚ùå Diret√≥rio de datasources n√£o encontrado"
echo ""

echo "üéØ === RESUMO DO DIAGN√ìSTICO ==="
echo "‚úÖ Containers rodando: $(docker-compose ps | grep -c 'Up')"
echo "‚úÖ PostgreSQL healthy: $(docker inspect postgres --format='{{.State.Health.Status}}' 2>/dev/null || echo 'unknown')"
echo "‚úÖ Grafana healthy: $(docker inspect grafana --format='{{.State.Health.Status}}' 2>/dev/null || echo 'unknown')"
echo ""
echo "üìù Pr√≥ximos passos sugeridos:"
echo "1. Se algum container n√£o est√° healthy, reinicie: docker-compose restart [service]"
echo "2. Se h√° erros de conectividade, verifique a rede: docker network ls"
echo "3. Se PostgreSQL n√£o tem dados, verifique o script init.sql"
echo "4. Teste o datasource manualmente no Grafana UI"